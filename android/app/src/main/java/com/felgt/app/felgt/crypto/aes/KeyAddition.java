package com.felgt.app.felgt.crypto.aes;

import com.felgt.app.felgt.utils.CryptoHelper;

class KeyAddition {
  public static final int[] rcon = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
      0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
      0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
      0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
      0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
      0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
      0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
      0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
      0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
      0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
      0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
      0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
      0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
      0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
      0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};

  private KeyAddition() {
  }

  static public void addRoundKey(int[][] bytematrix, int[][] keymatrix) {
    for (int i = 0; i < bytematrix.length; i++) {
      for (int j = 0; j < bytematrix[0].length; j++) {
        bytematrix[j][i] ^= keymatrix[j][i];
      }
    }
  }

  static public int[][] keySchedule(byte[] key) {
    int[][] sbox = ByteSubstitution.sbox;
    int binkeysize = key.length * 8;
    int colsize = binkeysize + 48 - (32 * ((binkeysize / 64) - 2)); //size of key scheduling will be based on the binary size of the key.
    int[][] keyMatrix = new int[4][colsize / 4]; //creates the matrix for key scheduling
    int rconpointer = 1;
    int[] t = new int[4];
    final int keycounter = binkeysize / 32;
    int k;

    //the first 1 (128-bit key) or 2 (256-bit key) set(s) of 4x4 matrices are filled with the key.
    CryptoHelper.byteArrayToMatrix(keyMatrix, key);

    int keypoint = keycounter;
    while (keypoint < (colsize / 4)) {
      int temp = keypoint % keycounter;
      if (temp == 0) {
        for (k = 0; k < 4; k++) {
          t[k] = keyMatrix[k][keypoint - 1];
        }
        t = schedule_core(t, rconpointer++);
        for (k = 0; k < 4; k++) {
          keyMatrix[k][keypoint] = t[k] ^ keyMatrix[k][keypoint - keycounter];
        }
        keypoint++;
      } else if (temp == 4) {
        for (k = 0; k < 4; k++) {
          int hex = keyMatrix[k][keypoint - 1];
          keyMatrix[k][keypoint] = sbox[hex / 16][hex % 16] ^ keyMatrix[k][keypoint - keycounter];
        }
        keypoint++;
      } else {
        int ktemp = keypoint + 3;
        while (keypoint < ktemp) {
          for (k = 0; k < 4; k++) {
            keyMatrix[k][keypoint] = keyMatrix[k][keypoint - 1] ^ keyMatrix[k][keypoint - keycounter];
          }
          keypoint++;
        }
      }
    }
    return keyMatrix;
  }

  private static int[] schedule_core(int[] in, int rconpointer) {
    int[][] sbox = ByteSubstitution.sbox;
    in = ShiftRows.leftrotate(in, 1);
    int hex;
    for (int i = 0; i < in.length; i++) {
      hex = in[i];
      in[i] = sbox[hex / 16][hex % 16];
    }
    in[0] ^= rcon[rconpointer];
    return in;
  }


  static int[][] subKey(int[][] km, int begin) {
    int[][] arr = new int[4][4];
    for (int i = 0; i < arr.length; i++) {
      for (int j = 0; j < arr.length; j++) {
        arr[i][j] = km[i][4 * begin + j];
      }
    }
    return arr;
  }
}
